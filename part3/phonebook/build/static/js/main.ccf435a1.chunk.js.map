{"version":3,"sources":["components/Header.js","components/PersonForm.js","components/Person.js","components/Persons.js","components/Filter.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","PersonForm","addPerson","newName","handleNewNameChange","newPhoneNumber","handleNewPhoneNumberChange","onSubmit","value","onChange","type","Person","name","number","removePerson","onClick","Persons","persons","search","filter","person","toLowerCase","includes","map","key","id","Filter","handleSearchChange","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","messageType","className","App","useState","setPersons","setNewName","setNewPhoneNumber","setSearch","setMessage","setMessageType","useEffect","personService","initialPersons","catch","error","setTimeout","event","target","preventDefault","doesNameAlreadyExist","some","personObject","window","confirm","updatedPerson","updatedPersons","returnedPerson","concat","find","removedPerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.ccf435a1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ title }) => {\n  return <h2>{title}</h2>;\n};\n\nexport default Header;\n","import React from 'react';\n\nconst PersonForm = ({\n  addPerson,\n  newName,\n  handleNewNameChange,\n  newPhoneNumber,\n  handleNewPhoneNumberChange,\n}) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input value={newName} onChange={handleNewNameChange} />\n      </div>\n      <div>\n        number:{' '}\n        <input value={newPhoneNumber} onChange={handleNewPhoneNumberChange} />\n      </div>\n\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Person = ({ name, number, removePerson }) => {\n  return (\n    <div>\n      {name} {number} <button onClick={removePerson}>delete</button>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from 'react';\nimport Person from './Person';\n\nconst Persons = ({ persons, search, removePerson }) => {\n  const filteredPersons = search\n    ? persons.filter((person) =>\n        person.name.toLowerCase().includes(search.toLowerCase())\n      )\n    : persons;\n\n  return filteredPersons.map((person) => (\n    <Person\n      key={person.name}\n      name={person.name}\n      number={person.number}\n      removePerson={() => removePerson(person.id)}\n    />\n  ));\n};\n\nexport default Persons;\n","import React from 'react';\n\nconst Filter = ({ search, handleSearchChange }) => {\n  return <input value={search} onChange={handleSearchChange} />\n};\n\nexport default Filter;\n","import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n\n  return request.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove,\n};\n","import React from 'react';\n\nconst Notification = ({ message, messageType }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={messageType}>{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Filter from './components/Filter';\nimport personService from './services/persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newPhoneNumber, setNewPhoneNumber] = useState('');\n  const [search, setSearch] = useState('');\n  const [message, setMessage] = useState(null);\n  const [messageType, setMessageType] = useState(null);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    const doesNameAlreadyExist = persons.some(\n      (person) => person.name === newName\n    );\n\n    const personObject = { name: newName, number: newPhoneNumber };\n\n    if (doesNameAlreadyExist) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const personToUpdate = persons.filter(\n          (person) => person.name === newName\n        )[0];\n        const { id } = personToUpdate;\n\n        personService\n          .update(id, personObject)\n          .then((updatedPerson) => {\n            const updatedPersons = persons.map((person) =>\n              person.name === newName ? updatedPerson : person\n            );\n\n            setPersons(updatedPersons);\n            setMessage(`Updated ${newName}`);\n            setMessageType('success');\n\n            setTimeout(() => {\n              setMessage(null);\n              setMessageType(null);\n            }, 5000);\n          })\n          .catch((error) => {\n            setMessage(`Person '${newName}' has already removed from server`);\n            setMessageType('error');\n\n            setTimeout(() => {\n              setMessage(null);\n              setMessageType(null);\n            }, 5000);\n          });\n      }\n    } else {\n      personService\n        .create(personObject)\n        .then((returnedPerson) => {\n          setPersons(persons.concat(returnedPerson));\n          setMessage(`Added ${newName}`);\n          setMessageType('success');\n\n          setTimeout(() => {\n            setMessage(null);\n            setMessageType(null);\n          }, 5000);\n        })\n        .catch((error) => {\n          setMessage(`Person '${newName}' cannot be added to the server`);\n          setMessageType('error');\n\n          setTimeout(() => {\n            setMessage(null);\n            setMessageType(null);\n          }, 5000);\n        });\n    }\n\n    setNewName('');\n    setNewPhoneNumber('');\n  };\n\n  const removePerson = (id) => {\n    const person = persons.find((person) => person.id === id);\n    const { name } = person;\n\n    if (window.confirm(`Delete ${name}?`)) {\n      personService\n        .remove(id)\n        .then((removedPerson) => {\n          setPersons(persons.filter((person) => person.id !== id));\n          setMessage(`Removed ${name}`);\n          setMessageType('success');\n\n          setTimeout(() => {\n            setMessage(null);\n            setMessageType(null);\n          }, 5000);\n        })\n        .catch((error) => {\n          setMessage(\n            `Information of ${person.name} has already been removed from the server`\n          );\n          setMessageType('error');\n\n          setTimeout(() => {\n            setMessage(null);\n            setMessageType(null);\n          }, 5000);\n        });\n    }\n  };\n\n  const handleNewNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNewPhoneNumberChange = (event) => {\n    setNewPhoneNumber(event.target.value);\n  };\n\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const hook = () => {\n    personService\n      .getAll()\n      .then((initialPersons) => setPersons(initialPersons))\n      .catch((error) => {\n        setMessage('Cannot retrieve all the persons in the phonebook');\n        setMessageType('error');\n\n        setTimeout(() => {\n          setMessage(null);\n          setMessageType(null);\n        }, 5000);\n      });\n  };\n\n  useEffect(hook, []);\n\n  return (\n    <div>\n      <Notification message={message} messageType={messageType} />\n      <Header title=\"Phonebook\" />\n      <Filter search={search} handleSearchChange={handleSearchChange} />\n      <PersonForm\n        value={newName}\n        addPerson={addPerson}\n        newName={newName}\n        handleNewNameChange={handleNewNameChange}\n        newPhoneNumber={newPhoneNumber}\n        handleNewPhoneNumberChange={handleNewPhoneNumberChange}\n      />\n      <Header title=\"Numbers\" />\n      <Persons persons={persons} search={search} removePerson={removePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}